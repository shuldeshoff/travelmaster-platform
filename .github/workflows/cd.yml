name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: true
        type: string

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Configure Kubernetes context
        run: |
          # Настройка kubeconfig для подключения к кластеру
          # Пример для Yandex Cloud:
          # echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          echo "Kubernetes context configured"

      - name: Deploy with Helm
        id: deploy
        run: |
          helm upgrade --install travelmaster ./helm/travelmaster \
            --namespace travelmaster-${{ inputs.environment }} \
            --create-namespace \
            --values ./helm/travelmaster/values-${{ inputs.environment }}.yaml \
            --set image.tag=${{ inputs.version }} \
            --wait \
            --timeout 10m

          # Получить URL развёрнутого приложения
          INGRESS_IP=$(kubectl get ingress -n travelmaster-${{ inputs.environment }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
          echo "url=http://$INGRESS_IP" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          # Простые smoke тесты после деплоя
          kubectl run smoke-test --rm -i --restart=Never \
            --image=curlimages/curl:latest \
            --namespace=travelmaster-${{ inputs.environment }} \
            -- curl -f http://gateway-service:8080/actuator/health

      - name: Notify deployment status
        if: always()
        run: |
          echo "Deployment to ${{ inputs.environment }} completed"
          # Добавить уведомления при необходимости

  rollback:
    name: Rollback if needed
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Rollback deployment
        run: |
          helm rollback travelmaster \
            --namespace travelmaster-${{ inputs.environment }} \
            --wait

      - name: Notify rollback
        run: |
          echo "Deployment rolled back for ${{ inputs.environment }}"

